<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[HEXO搭建个人博客]]></title>
      <url>http://yoursite.com/2016/08/24/HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>配置环境#</p>
<ul>
<li>安装Node（必须）</li>
<li>安装Git（必须）</li>
<li>申请GitHub（必须）</li>
<li>正式安装HEXO　</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS编码规范]]></title>
      <url>http://yoursite.com/2016/08/24/iOS%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<pre><code>[TOC]
</code></pre><p>##统一代码规范原则</p>
<blockquote>
<p>为使代码清晰简洁，方便阅读理解，请大家统一遵从以下的代码规范。<br>尽量同苹果官方代码规范靠齐，做到逻辑清楚，变量名具有可读性，函数功能划分合理</p>
</blockquote>
<p>主要参考规范：<br>[Google Objective-C Style Guide] (<a href="http://google-styleguide.googlecode.com/svn/trunk/objcguide.xml" target="_blank" rel="external">http://google-styleguide.googlecode.com/svn/trunk/objcguide.xml</a>)<br>[Coding Guidelines for Cocoa] (<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.pdf" target="_blank" rel="external">https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.pdf</a>)</p>
<p>##命名</p>
<p>###类名</p>
<blockquote>
<p>类名（以及类别、协议名）应首字母大写，并以驼峰格式分割单词。<br>应用层 的代码，应该尽量避免不必要的前缀。为每个类都添加相同的前缀无助于可读性。当编写的代码期望在不同应用程序间复用时，应使用前缀（如：<code>GTMSendMessage</code>）。</p>
</blockquote>
<p>###类别名</p>
<blockquote>
<p>类别名应该有两三个字母的前缀以表示类别是项目的一部分或者该类别是通用的。类别名应该包含它所扩展的类的名字。</p>
</blockquote>
<p>###方法名</p>
<blockquote>
<p>方法名应该以小写字母开头，并混合驼峰格式。每个具名参数也应该以小写字母开头。</p>
</blockquote>
<p>方法名应尽量读起来就像句子，这表示你应该选择与方法名连在一起读起来通顺的参数名。（例如，<code>convertPoint:fromRect:</code> 或 <code>replaceCharactersInRange:withString:</code>）。<br>自己命名的方法不应该以get作为前缀：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (id)getDelegate;  // 不建议</div><div class="line">- (id)delegate;     // 建议</div></pre></td></tr></table></figure>
<p>###变量名</p>
<blockquote>
<p>变量名应该以小写字母开头，并使用驼峰格式。类的成员变量应该以下划线作为后缀。例如：myLocalVariable、myInstanceVariable。</p>
</blockquote>
<p>实例变量应该混合大小写并且变量名前面加下划线“_”，局部变量不用加。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line">&#123;</div><div class="line">    int _num;</div><div class="line">    NSString* _name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>##注释<br>尽可能把代码写的如同文档一样，让别人直接看代码就知道意思，写代码时别担心名字太长<br>建议使用“#pragma mark”，方便阅读代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 一个NSApplication处理APP启动和关机通知的代理方法</div><div class="line">@interface MyAppDelegate : NSObject &#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>##空格和留白</p>
<p>###方法声明和定义</p>
<blockquote>
<p>方法中得代码应该缩进 4 个空格。</p>
<ul>
<li>/ + 和返回类型之间须使用一个空格，参数列表中只有参数之间可以有空格。</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//方法声明和定义</div><div class="line">//参数类型后的星号和参数类型间的空格是可选的。当写新的代码时，要与先前代码保持一致。</div><div class="line">- (void)doSomethingWithString:(NSString *)theString &#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">//多参数方法定义</div><div class="line">//如果一行有非常多的参数，更好的方式是将每个参数单独拆成一行。如果使用多行，将每个参数前的冒号对齐。</div><div class="line">- (void)doSomethingWith:(GTMFoo *)theFoo</div><div class="line">                   rect:(NSRect)theRect</div><div class="line">               interval:(float)theInterval &#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">//当第一个关键字比其它的短时，保证下一行至少有 4 个空格的缩进。这样可以使关键字垂直对齐，而不是使用冒号对齐：</div><div class="line">- (void)short:(GTMFoo *)theFoo</div><div class="line">    longKeyword:(NSRect)theRect</div><div class="line">    evenLongerKeyword:(float)theInterval &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###方法调用</p>
<blockquote>
<p>方法调用应尽量保持与方法声明的格式一致。当格式的风格有多种选择时，新的代码要与已有代码保持一致。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">//不建议的风格</div><div class="line">[myObject doFooWith:arg1 name:arg2  </div><div class="line">              error:arg3];</div><div class="line">              </div><div class="line">[myObject doFooWith:arg1</div><div class="line">               name:arg2 error:arg3];</div><div class="line"></div><div class="line">[myObject doFooWith:arg1</div><div class="line">          name:arg2  </div><div class="line">          error:arg3];</div><div class="line"></div><div class="line"></div><div class="line">//建议风格调用时所有参数应该在同一行：</div><div class="line">[myObject doFooWith:arg1 name:arg2 error:arg3];</div><div class="line"></div><div class="line">//或者每行一个参数，以冒号对齐：</div><div class="line">[myObject doFooWith:arg1</div><div class="line">               name:arg2</div><div class="line">              error:arg3];</div><div class="line">              </div><div class="line">//方法定义与方法声明一样，当关键字的长度不足以以冒号对齐时，下一行都要以四个空格进行缩进。</div><div class="line">[myObj short:arg1</div><div class="line">    longKeyword:arg2</div><div class="line">    evenLongerKeyword:arg3];</div></pre></td></tr></table></figure>
<p>##@public 和 @private</p>
<blockquote>
<p><code>@public</code> 和 <code>@private</code> 访问修饰符应该以一个空格缩进。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@interface MyClass : NSObject &#123;</div><div class="line"> @public</div><div class="line">  ...</div><div class="line"> @private</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>##协议名</p>
<blockquote>
<p>类型标识符和尖括号内的协议名之间，不能有任何空格。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//这条规则适用于类声明、实例变量以及方法声明。例如：</div><div class="line">@interface MyProtocoledClass : NSObject&lt;NSWindowDelegate&gt; &#123;</div><div class="line"> @private</div><div class="line">  id&lt;MyFancyDelegate&gt; delegate;</div><div class="line">&#125;</div><div class="line">- (void)setDelegate:(id&lt;MyFancyDelegate&gt;)aDelegate;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>##块（闭包）</p>
<blockquote>
<p>块中的代码应该缩进4个空格</p>
</blockquote>
<p>取决于块的长度，下列都是合理的风格准则：</p>
<ul>
<li>如果一行可以写完块，则没必要换行。</li>
<li>如果不得不换行，关括号应与块声明的第一个字符对齐。</li>
<li>块内的代码须按4空格缩进</li>
<li>如果块太长，比如超过20行，建议定义成一个局部变量，然后再使用该变量</li>
<li>如果块不带参数，<code>^{</code>之间无需空格。如果带有参数<code>^{</code>之间也无须空格，但是<code>) {</code>之间须有一个空格</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">// 如果可以，整个块在一行上。</div><div class="line">[operation setCompletionBlock:^&#123; [self onOperationDone]; &#125;];</div><div class="line"></div><div class="line"></div><div class="line">// 块的内容也可以另起一行，但是必须缩进四个空格，后面的与第一行对齐</div><div class="line">[operation setCompletionBlock:^&#123;</div><div class="line">    [self.delegate newDataAvailable];</div><div class="line">&#125;];</div><div class="line"></div><div class="line">dispatch_async(fileIOQueue_, ^&#123;</div><div class="line">    NSString* path = [self sessionFilePath];</div><div class="line">    if (path) &#123;</div><div class="line">      // ...</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">//参数名和block在同一行上时注意 “^&#123;“ 之间没有空格  ”) &#123;“有一个空格</div><div class="line">[[SessionService sharedService]</div><div class="line">    loadWindowWithCompletionBlock:^(SessionWindow *window) &#123;</div><div class="line">        if (window) &#123;</div><div class="line">          [self windowDidLoad:window];</div><div class="line">        &#125; else &#123;</div><div class="line">          [self errorLoadingWindow];</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line"></div><div class="line"></div><div class="line">// 参数名和block不在同一行上时的写法</div><div class="line">[[SessionService sharedService]</div><div class="line">    loadWindowWithCompletionBlock:</div><div class="line">        ^(SessionWindow *window) &#123;</div><div class="line">            if (window) &#123;</div><div class="line">              [self windowDidLoad:window];</div><div class="line">            &#125; else &#123;</div><div class="line">              [self errorLoadingWindow];</div><div class="line">            &#125;</div><div class="line">        &#125;];</div><div class="line"></div><div class="line"></div><div class="line">// 如果块太长时，定义成一个局部变量，然后再使用该变量的格式</div><div class="line">void (^largeBlock)(void) = ^&#123;</div><div class="line">    // ...</div><div class="line">&#125;;</div><div class="line">[operationQueue_ addOperationWithBlock:largeBlock];</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2016/08/24/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
