<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[HEXO搭建个人博客]]></title>
      <url>http://yoursite.com/2016/08/24/HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h1 id="HEXO搭建个人博客"><a href="#HEXO搭建个人博客" class="headerlink" title="HEXO搭建个人博客"></a>HEXO搭建个人博客</h1><p>这篇教程是针对Mac的，参考链接：<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">Hexo文档</a></p>
<h2 id="1-安装Node（必须）"><a href="#1-安装Node（必须）" class="headerlink" title="1. 安装Node（必须）"></a>1. 安装Node（必须）</h2><p>到Node.js<a href="https://nodejs.org/en/" target="_blank" rel="external">官网</a>下载相应平台的最新版本，一路安装即可。</p>
<h2 id="2-安装Git（必须）"><a href="#2-安装Git（必须）" class="headerlink" title="2. 安装Git（必须）"></a>2. 安装Git（必须）</h2><p>安装Xcode就自带有Git</p>
<h2 id="3-申请GitHub（必须）"><a href="#3-申请GitHub（必须）" class="headerlink" title="3. 申请GitHub（必须）"></a>3. 申请GitHub（必须）</h2><p>用来做博客的远程创库、域名、服务器之类的。<a href="https://github.com" target="_blank" rel="external">github</a>账号没有的话直接申请就行了，跟一般的注册账号差不多</p>
<h2 id="4-正式安装HEXO"><a href="#4-正式安装HEXO" class="headerlink" title="4. 正式安装HEXO　"></a>4. 正式安装HEXO　</h2><p>第一步<br>Node和Git都安装好后，执行如下命令安装hexo：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sudo npm install -g hexo</div></pre></td></tr></table></figure>
<p>第二步<br>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。“Blog”是将要创建的文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ hexo init Blog</div><div class="line">$ cd Blog</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>第三步<br>安装完成之后指定文件夹的目录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── source</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes</div></pre></td></tr></table></figure>
<p>第四步<br>现在可以试试启动本地服务，进行文章预览调试，命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ hexo server (hexo s)也可以</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">INFO  Start processing</div><div class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure>
<p>在浏览器中输入 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 就可看到你自己的博客最原始的页面了</p>
<h2 id="5-配置Github"><a href="#5-配置Github" class="headerlink" title="5. 配置Github　"></a>5. 配置Github　</h2><p>建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法 然后建立关联<br>现在我们需要到Blog文件夹内找到并编辑_config.yml文件，来建立关联，命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ vim _config.yml</div></pre></td></tr></table></figure>
<p>在文件的最下面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: https://github.com/pengrain/pengrain.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>保存后再执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>然后再浏览器中输入<a href="http://pengrain.github.io/" target="_blank" rel="external">http://pengrain.github.io/</a> 就行了，我的github的账户叫pengrain,把这个改成你github的账户名就行了</p>
<p>到这里整个hexo就部署好了，以后要添加文章的步骤如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">hexo new &quot;postName&quot; #新建文章</div><div class="line">hexo generate #生成静态页面至public目录 在目录source/_posts中可以直接用MarkDown工具编辑文章</div><div class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</div><div class="line">hexo deploy #将.deploy目录部署到GitHub</div></pre></td></tr></table></figure>
<h2 id="6-主题配置"><a href="#6-主题配置" class="headerlink" title="6. 主题配置　"></a>6. 主题配置　</h2><p>在这里有非常详细的主题配置介绍<br><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">next主题</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS编码规范]]></title>
      <url>http://yoursite.com/2016/08/24/iOS%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h2 id="统一代码规范原则"><a href="#统一代码规范原则" class="headerlink" title="统一代码规范原则"></a>统一代码规范原则</h2><blockquote>
<p>为使代码清晰简洁，方便阅读理解，请大家统一遵从以下的代码规范。<br>尽量同苹果官方代码规范靠齐，做到逻辑清楚，变量名具有可读性，函数功能划分合理</p>
</blockquote>
<p>主要参考规范：</p>
<p><a href="http://google-styleguide.googlecode.com/svn/trunk/objcguide.xml" target="_blank" rel="external">Google Objective-C Style Guide</a></p>
<p><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.pdf" target="_blank" rel="external">Coding Guidelines for Cocoa</a></p>
<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><h3 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h3><blockquote>
<p>类名（以及类别、协议名）应首字母大写，并以驼峰格式分割单词。<br>应用层 的代码，应该尽量避免不必要的前缀。为每个类都添加相同的前缀无助于可读性。当编写的代码期望在不同应用程序间复用时，应使用前缀（如：<code>GTMSendMessage</code>）。</p>
</blockquote>
<h3 id="类别名"><a href="#类别名" class="headerlink" title="类别名"></a>类别名</h3><blockquote>
<p>类别名应该有两三个字母的前缀以表示类别是项目的一部分或者该类别是通用的。类别名应该包含它所扩展的类的名字。</p>
</blockquote>
<h3 id="方法名"><a href="#方法名" class="headerlink" title="方法名"></a>方法名</h3><blockquote>
<p>方法名应该以小写字母开头，并混合驼峰格式。每个具名参数也应该以小写字母开头。</p>
</blockquote>
<p>方法名应尽量读起来就像句子，这表示你应该选择与方法名连在一起读起来通顺的参数名。（例如，<code>convertPoint:fromRect:</code> 或 <code>replaceCharactersInRange:withString:</code>）。<br>自己命名的方法不应该以get作为前缀：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)getDelegate;  <span class="comment">// 不建议</span></div><div class="line">- (<span class="keyword">id</span>)delegate;     <span class="comment">// 建议</span></div></pre></td></tr></table></figure>
<h3 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h3><blockquote>
<p>变量名应该以小写字母开头，并使用驼峰格式。类的成员变量应该以下划线作为后缀。例如：myLocalVariable、myInstanceVariable。</p>
</blockquote>
<p>实例变量应该混合大小写并且变量名前面加下划线“_”，局部变量不用加。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> _num;</div><div class="line">    <span class="built_in">NSString</span>* _name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>尽可能把代码写的如同文档一样，让别人直接看代码就知道意思，写代码时别担心名字太长<br>建议使用“#pragma mark”，方便阅读代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 一个NSApplication处理APP启动和关机通知的代理方法</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyAppDelegate</span> : <span class="title">NSObject</span> </span>&#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="空格和留白"><a href="#空格和留白" class="headerlink" title="空格和留白"></a>空格和留白</h2><h3 id="方法声明和定义"><a href="#方法声明和定义" class="headerlink" title="方法声明和定义"></a>方法声明和定义</h3><blockquote>
<p>方法中得代码应该缩进 4 个空格。</p>
<ul>
<li>/ + 和返回类型之间须使用一个空格，参数列表中只有参数之间可以有空格。</li>
</ul>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//方法声明和定义</span></div><div class="line"><span class="comment">//参数类型后的星号和参数类型间的空格是可选的。当写新的代码时，要与先前代码保持一致。</span></div><div class="line">- (<span class="keyword">void</span>)doSomethingWithString:(<span class="built_in">NSString</span> *)theString &#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//多参数方法定义</span></div><div class="line"><span class="comment">//如果一行有非常多的参数，更好的方式是将每个参数单独拆成一行。如果使用多行，将每个参数前的冒号对齐。</span></div><div class="line">- (<span class="keyword">void</span>)doSomethingWith:(GTMFoo *)theFoo</div><div class="line">                   rect:(<span class="built_in">NSRect</span>)theRect</div><div class="line">               interval:(<span class="keyword">float</span>)theInterval &#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//当第一个关键字比其它的短时，保证下一行至少有 4 个空格的缩进。这样可以使关键字垂直对齐，而不是使用冒号对齐：</span></div><div class="line">- (<span class="keyword">void</span>)<span class="keyword">short</span>:(GTMFoo *)theFoo</div><div class="line">    longKeyword:(<span class="built_in">NSRect</span>)theRect</div><div class="line">    evenLongerKeyword:(<span class="keyword">float</span>)theInterval &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><blockquote>
<p>方法调用应尽量保持与方法声明的格式一致。当格式的风格有多种选择时，新的代码要与已有代码保持一致。</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//不建议的风格</span></div><div class="line">[myObject doFooWith:arg1 name:arg2  </div><div class="line">              error:arg3];</div><div class="line">              </div><div class="line">[myObject doFooWith:arg1</div><div class="line">               name:arg2 error:arg3];</div><div class="line"></div><div class="line">[myObject doFooWith:arg1</div><div class="line">          name:arg2  </div><div class="line">          error:arg3];</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//建议风格调用时所有参数应该在同一行：</span></div><div class="line">[myObject doFooWith:arg1 name:arg2 error:arg3];</div><div class="line"></div><div class="line"><span class="comment">//或者每行一个参数，以冒号对齐：</span></div><div class="line">[myObject doFooWith:arg1</div><div class="line">               name:arg2</div><div class="line">              error:arg3];</div><div class="line">              </div><div class="line"><span class="comment">//方法定义与方法声明一样，当关键字的长度不足以以冒号对齐时，下一行都要以四个空格进行缩进。</span></div><div class="line">[myObj <span class="keyword">short</span>:arg1</div><div class="line">    longKeyword:arg2</div><div class="line">    evenLongerKeyword:arg3];</div></pre></td></tr></table></figure>
<h2 id="public-和-private"><a href="#public-和-private" class="headerlink" title="@public 和 @private"></a>@public 和 @private</h2><blockquote>
<p><code>@public</code> 和 <code>@private</code> 访问修饰符应该以一个空格缩进。</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyClass</span> : <span class="title">NSObject</span> </span>&#123;</div><div class="line"> <span class="keyword">@public</span></div><div class="line">  ...</div><div class="line"> <span class="keyword">@private</span></div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="协议名"><a href="#协议名" class="headerlink" title="协议名"></a>协议名</h2><blockquote>
<p>类型标识符和尖括号内的协议名之间，不能有任何空格。</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//这条规则适用于类声明、实例变量以及方法声明。例如：</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyProtocoledClass</span> : <span class="title">NSObject</span>&lt;<span class="title">NSWindowDelegate</span>&gt; </span>&#123;</div><div class="line"> <span class="keyword">@private</span></div><div class="line">  <span class="keyword">id</span>&lt;MyFancyDelegate&gt; delegate;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)setDelegate:(<span class="keyword">id</span>&lt;MyFancyDelegate&gt;)aDelegate;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="块（闭包）"><a href="#块（闭包）" class="headerlink" title="块（闭包）"></a>块（闭包）</h2><blockquote>
<p>块中的代码应该缩进4个空格</p>
</blockquote>
<p>取决于块的长度，下列都是合理的风格准则：</p>
<ul>
<li>如果一行可以写完块，则没必要换行。</li>
<li>如果不得不换行，关括号应与块声明的第一个字符对齐。</li>
<li>块内的代码须按4空格缩进</li>
<li>如果块太长，比如超过20行，建议定义成一个局部变量，然后再使用该变量</li>
<li>如果块不带参数，<code>^{</code>之间无需空格。如果带有参数<code>^{</code>之间也无须空格，但是<code>) {</code>之间须有一个空格</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 如果可以，整个块在一行上。</span></div><div class="line">[operation setCompletionBlock:^&#123; [<span class="keyword">self</span> onOperationDone]; &#125;];</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 块的内容也可以另起一行，但是必须缩进四个空格，后面的与第一行对齐</span></div><div class="line">[operation setCompletionBlock:^&#123;</div><div class="line">    [<span class="keyword">self</span>.delegate newDataAvailable];</div><div class="line">&#125;];</div><div class="line"></div><div class="line"><span class="built_in">dispatch_async</span>(fileIOQueue_, ^&#123;</div><div class="line">    <span class="built_in">NSString</span>* path = [<span class="keyword">self</span> sessionFilePath];</div><div class="line">    <span class="keyword">if</span> (path) &#123;</div><div class="line">      <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//参数名和block在同一行上时注意 “^&#123;“ 之间没有空格  ”) &#123;“有一个空格</span></div><div class="line">[[SessionService sharedService]</div><div class="line">    loadWindowWithCompletionBlock:^(SessionWindow *window) &#123;</div><div class="line">        <span class="keyword">if</span> (window) &#123;</div><div class="line">          [<span class="keyword">self</span> windowDidLoad:window];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          [<span class="keyword">self</span> errorLoadingWindow];</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 参数名和block不在同一行上时的写法</span></div><div class="line">[[SessionService sharedService]</div><div class="line">    loadWindowWithCompletionBlock:</div><div class="line">        ^(SessionWindow *window) &#123;</div><div class="line">            <span class="keyword">if</span> (window) &#123;</div><div class="line">              [<span class="keyword">self</span> windowDidLoad:window];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">              [<span class="keyword">self</span> errorLoadingWindow];</div><div class="line">            &#125;</div><div class="line">        &#125;];</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 如果块太长时，定义成一个局部变量，然后再使用该变量的格式</span></div><div class="line"><span class="keyword">void</span> (^largeBlock)(<span class="keyword">void</span>) = ^&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div><div class="line">[operationQueue_ addOperationWithBlock:largeBlock];</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2016/08/24/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
