<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[CABasicAnimation动画]]></title>
      <url>http://yoursite.com/2016/08/31/CABasicAnimation%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<h2 id="CABasicAnimation动画"><a href="#CABasicAnimation动画" class="headerlink" title="CABasicAnimation动画"></a>CABasicAnimation动画</h2><p>在CABasicAnimation类中有三个属性：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//动画的开始帧和结束帧</span></div><div class="line"><span class="comment">//fromValue : 开始值</span></div><div class="line"><span class="comment">//toValue   : 终了值（绝对值）</span></div><div class="line"><span class="comment">//byValue   : 终了值（相对值）</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">strong</span>) <span class="keyword">id</span> fromValue;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">strong</span>) <span class="keyword">id</span> toValue;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">strong</span>) <span class="keyword">id</span> byValue;</div></pre></td></tr></table></figure>
<p>当然还有这些继承的属性：</p>
<table>
<thead>
<tr>
<th>CABasicAnimation的相关属性</th>
<th>属性含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>duration</td>
<td>动画时长（秒为单位）</td>
</tr>
<tr>
<td>repeatCount</td>
<td>重复次数，永久重复的话设置为HUGE_VALF</td>
</tr>
<tr>
<td>RepeatDuration</td>
<td>定了动画应该被重复多久。动画会一直重复,直到设定的时间流逝完。它不应该和 repeatCount 一起使用</td>
</tr>
<tr>
<td>beginTime</td>
<td>指定动画开始时间。从开始指定延迟几秒执行的话，请设置为「CACurrentMediaTime() + 秒数」的形式。</td>
</tr>
<tr>
<td>timingFunction</td>
<td>设定动画的速度变化</td>
</tr>
<tr>
<td>autoreverses</td>
<td>动画结束时是否执行逆动画</td>
</tr>
<tr>
<td>speed</td>
<td>默认的值为 1.0.这意味着动画播放按照默认的速度。如果你改变这个值为 2.0,动画会用 2 倍的速度播放。</td>
</tr>
</tbody>
</table>
<p><strong>在使用CABasicAnimation执行动画，在动画结束后会回归到动画开始前的状态。</strong></p>
<blockquote>
<p>为什么动画结束后返回原状态？首先我们需要搞明白一点的是，layer动画运行的过程是怎样的？其实在我们给一个视图添加layer动画时，真正移动并不是我们的视图本身，而是 presentation layer 的一个缓存。动画开始时 presentation layer开始移动，原始layer隐藏，动画结束时，presentation layer从屏幕上移除，原始layer显示。这就解释了为什么我们的视图在动画结束后又回到了原来的状态，因为它根本就没动过。<br>这个同样也可以解释为什么在动画移动过程中，我们为何不能对其进行任何操作。<br>所以在我们完成layer动画之后，最好将我们的layer属性设置为我们最终状态的属性，然后将presentation layer 移除掉。</p>
</blockquote>
<p>想要解决这个问题需要设置 <strong>removedOnCompletion</strong> 和 <strong>fillMode</strong> 属性。</p>
<blockquote>
<p>fillMode属性的理解该属性定义了你的动画在开始和结束时的动作。默认值是 kCAFillModeRemoved。<br>kCAFillModeRemoved 这个是默认值,也就是说当动画开始前和动画结束后,动画对layer都没有影响,动画结束后,layer会恢复到之前的状态<br>kCAFillModeForwards 当动画结束后,layer会一直保持着动画最后的状态<br>kCAFillModeBackwards 这个和kCAFillModeForwards是相对的,就是在动画开始前,你只要将动画加入了一个layer,layer便立即进入动画的初始状态。因为有可能出现fromValue不是目前layer的初始状态的情况，如果fromValue就是layer当前的状态，则这个参数就没太大意义。<br>kCAFillModeBoth 理解了上面两个,这个就很好理解了,这个其实就是上面两个的合成.动画加入后开始之前,layer便处于动画初始状态,动画结束后layer保持动画最后的状态.</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//动画终了后不返回初始状态</span></div><div class="line"><span class="comment">//animation.removedOnCompletion = NO;</span></div><div class="line"><span class="comment">//animation.fillMode = kCAFillModeForwards;</span></div></pre></td></tr></table></figure>
<p>CABasicAnimation的timingFunction设置</p>
<blockquote>
<p>kCAMediaTimingFunctionLinear 传这个值，在整个动画时间内动画都是以一个相同的速度来改变。也就是匀速运动。<br>kCAMediaTimingFunctionEaseIn 使用该值，动画开始时会较慢，之后动画会加速。<br>kCAMediaTimingFunctionEaseOut 使用该值，动画在开始时会较快，之后动画速度减慢。<br>kCAMediaTimingFunctionEaseInEaseOut 使用该值，动画在开始和结束时速度较慢，中间时间段内速度较快。</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">anim = [<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</div></pre></td></tr></table></figure>
<p>CABasicAnimation通过改变animationWithKeyPath来改变动画方式，<br>animationWithKeyPath常用值</p>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
<th>使用形式</th>
</tr>
</thead>
<tbody>
<tr>
<td>transform.scale （可以分别设置X或是Y）</td>
<td>比例转换</td>
<td>@(0.8) / [NSNumber numberWithFloat:0.8]</td>
</tr>
<tr>
<td>transform.rotation （可以分别设置X、Y、Z）</td>
<td>旋转</td>
<td>@(M_PI)/ [NSNumber numberWithFloat:M_PI]</td>
</tr>
<tr>
<td>opacity</td>
<td>透明度（可以用来实现闪烁效果）</td>
<td>@(0.8) /[NSNumber numberWithFloat:1.f]</td>
</tr>
<tr>
<td>backgroundColor</td>
<td>背景颜色修改</td>
<td>(id)[UIColor greenColor].CGColor</td>
</tr>
<tr>
<td>cornerRadius</td>
<td>圆角</td>
<td>@(20) /[NSNumber numberWithFloat:20.f]</td>
</tr>
<tr>
<td>contents</td>
<td>可以用来做图片的变换</td>
<td>(id)[UIImage imageNamed:@”3.jpg”].CGImage</td>
</tr>
<tr>
<td>borderWidth</td>
<td>边框宽度</td>
<td>@(20) /[NSNumber numberWithFloat:1.f]</td>
</tr>
<tr>
<td>shadowColor</td>
<td>阴影颜色</td>
<td>(id)[UIColor greenColor].CGColor</td>
</tr>
<tr>
<td>shadowOffset</td>
<td>阴影偏移</td>
<td>[NSValue valueWithUIOffset:UIOffsetMake(5, 5)]</td>
</tr>
<tr>
<td>shadowOpacity</td>
<td>阴影透明度</td>
<td>@(0.8)</td>
</tr>
<tr>
<td>shadowRadius</td>
<td>阴影圆角</td>
<td>@(20) /[NSNumber numberWithFloat:20.f]</td>
</tr>
<tr>
<td>hidden</td>
<td>隐藏</td>
<td>@(1)</td>
</tr>
<tr>
<td>contentsRect.size.width</td>
<td>横向拉升缩放</td>
<td>@(0.4) 0~1之间</td>
</tr>
<tr>
<td>bounds</td>
<td>大小中心不变</td>
<td>[NSValue valueWithCGRect:CGRectMark(0,0,100,100)]</td>
</tr>
<tr>
<td>frame</td>
<td></td>
</tr>
<tr>
<td>mask</td>
<td></td>
</tr>
<tr>
<td>masksToBounds</td>
<td></td>
</tr>
<tr>
<td>position</td>
<td>移动</td>
<td>[NSValue valueWithCGPoint:_imageView.layer.position];</td>
</tr>
</tbody>
</table>
<p>以下为实例代码：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">///图片替换动画</span></div><div class="line">- (<span class="keyword">void</span>)contents &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">CABasicAnimation</span> *anim = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"contents"</span>];</div><div class="line">    anim.duration = <span class="number">1.</span>f;</div><div class="line">    anim.fromValue = (<span class="keyword">id</span>)[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"3.jpg"</span>].CGImage;</div><div class="line">    anim.toValue = (<span class="keyword">id</span>)[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"2.png"</span>].CGImage;</div><div class="line"> </div><div class="line">    </div><div class="line">    anim.timingFunction = [<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</div><div class="line">    anim.repeatCount = <span class="built_in">CGFLOAT_MAX</span>;</div><div class="line">    anim.autoreverses = <span class="literal">YES</span>;</div><div class="line">    </div><div class="line">    [_imageView.layer addAnimation:anim forKey:<span class="literal">nil</span>];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//闪烁动画</span></div><div class="line">- (<span class="keyword">void</span>)opacityForever &#123;</div><div class="line">    <span class="built_in">CABasicAnimation</span> *animation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"opacity"</span>];</div><div class="line">    <span class="comment">//设置动画属性</span></div><div class="line">    animation.fromValue = [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">1.</span>f];</div><div class="line">    animation.toValue = [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0.</span>f];</div><div class="line">    </div><div class="line">    animation.duration = <span class="number">0.5</span>;<span class="comment">//持续时间</span></div><div class="line">    animation.repeatCount = MAXFLOAT;<span class="comment">//重复次数</span></div><div class="line">    animation.autoreverses = <span class="literal">YES</span>;</div><div class="line">    </div><div class="line">    <span class="comment">//将动画添加到视图层</span></div><div class="line">    [_imageView.layer addAnimation:animation forKey:<span class="string">@"opacity_layer"</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">///移动动画</span></div><div class="line">- (<span class="keyword">void</span>)startMove &#123;</div><div class="line"></div><div class="line">    <span class="comment">//创建动画</span></div><div class="line">    <span class="built_in">CABasicAnimation</span> *animation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"position"</span>];</div><div class="line">    </div><div class="line">    <span class="comment">//设置动画属性</span></div><div class="line">    animation.fromValue = [<span class="built_in">NSValue</span> valueWithCGPoint:_imageView.layer.position];<span class="comment">//起始帧</span></div><div class="line">    animation.toValue = [<span class="built_in">NSValue</span> valueWithCGPoint:<span class="keyword">self</span>.view.center];<span class="comment">//结束帧</span></div><div class="line">    </div><div class="line">    animation.duration = <span class="number">10</span>;<span class="comment">//持续时间</span></div><div class="line">    animation.repeatCount = MAXFLOAT;<span class="comment">//重复次数</span></div><div class="line">    animation.autoreverses = <span class="literal">YES</span>;<span class="comment">//结束后执行逆动画</span></div><div class="line">    </div><div class="line">    <span class="comment">//将动画添加到视图层</span></div><div class="line">    [_imageView.layer addAnimation:animation forKey:<span class="string">@"position_layer"</span>];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">///旋转动画</span></div><div class="line">- (<span class="keyword">void</span>)startRotation &#123;</div><div class="line">    <span class="comment">//创建动画</span></div><div class="line">    <span class="built_in">CABasicAnimation</span> *animation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"transform.rotation"</span>];</div><div class="line">    </div><div class="line">    <span class="comment">//设置动画属性</span></div><div class="line">    animation.fromValue = [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0.0</span>];<span class="comment">//开始角度</span></div><div class="line">    animation.toValue = [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">2</span> * M_PI];<span class="comment">//结束角度</span></div><div class="line">    animation.duration = <span class="number">10</span>;<span class="comment">//持续时间</span></div><div class="line">    animation.repeatCount = MAXFLOAT;<span class="comment">//重复次数</span></div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">//将动画添加到视图层</span></div><div class="line">    [_imageView.layer addAnimation:animation forKey:<span class="string">@"rotation_layer"</span>];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">///缩放动画</span></div><div class="line">- (<span class="keyword">void</span>)startScale &#123;</div><div class="line">    <span class="comment">//创建动画</span></div><div class="line">    <span class="built_in">CABasicAnimation</span> *animation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"transform.scale"</span>];</div><div class="line">    </div><div class="line">    <span class="comment">//设置动画属性</span></div><div class="line">    animation.fromValue = [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">1.0</span>];<span class="comment">//开始缩放倍数</span></div><div class="line">    animation.toValue = [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">2.0</span>];<span class="comment">//结束时的倍数</span></div><div class="line">    </div><div class="line">    animation.duration = <span class="number">10</span>;<span class="comment">//持续时间</span></div><div class="line">    animation.repeatCount = MAXFLOAT;<span class="comment">//重复次数</span></div><div class="line">    animation.autoreverses = <span class="literal">YES</span>;<span class="comment">//结束后执行逆动画</span></div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">//将动画添加到视图层</span></div><div class="line">    [_imageView.layer addAnimation:animation forKey:<span class="string">@"scale_layer"</span>];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *  背景颜色</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)backgroundColorAnim &#123;</div><div class="line">    <span class="comment">//创建动画</span></div><div class="line">    <span class="built_in">CABasicAnimation</span> *animation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"backgroundColor"</span>];</div><div class="line">    </div><div class="line">    <span class="comment">//设置动画属性</span></div><div class="line">    animation.fromValue = (__bridge <span class="keyword">id</span> _Nullable)([<span class="built_in">UIColor</span> greenColor].CGColor);<span class="comment">//起始帧</span></div><div class="line">    animation.toValue = (__bridge <span class="keyword">id</span> _Nullable)([<span class="built_in">UIColor</span> redColor].CGColor);<span class="comment">//结束帧</span></div><div class="line">    </div><div class="line">    animation.duration = <span class="number">10</span>;<span class="comment">//持续时间</span></div><div class="line">    animation.repeatCount = HUGE_VALF;<span class="comment">//重复次数</span></div><div class="line">    animation.autoreverses = <span class="literal">YES</span>;<span class="comment">//结束后执行逆动画</span></div><div class="line">    </div><div class="line">    <span class="comment">//将动画添加到视图层</span></div><div class="line">    [_imageView.layer addAnimation:animation forKey:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">///组合动画</span></div><div class="line">- (<span class="keyword">void</span>)startMoveAndRotation &#123;</div><div class="line">    <span class="comment">//创建动画</span></div><div class="line">    <span class="built_in">CABasicAnimation</span> *animation1 = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"position"</span>];</div><div class="line">    </div><div class="line">    <span class="comment">//创建动画</span></div><div class="line">    <span class="built_in">CABasicAnimation</span> *animation2 = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"transform.rotation"</span>];</div><div class="line">    </div><div class="line">    <span class="comment">//设置移动终点</span></div><div class="line">    animation1.toValue = [<span class="built_in">NSValue</span> valueWithCGPoint:<span class="keyword">self</span>.view.center];<span class="comment">//结束帧</span></div><div class="line">    <span class="comment">//设置旋转角度</span></div><div class="line">    animation2.toValue = [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">2</span> * M_PI];<span class="comment">//结束角度</span></div><div class="line">    </div><div class="line">    <span class="comment">//添加到动画组</span></div><div class="line">    <span class="built_in">CAAnimationGroup</span> *group = [<span class="built_in">CAAnimationGroup</span> animation];</div><div class="line">    <span class="comment">//设置动画组属性</span></div><div class="line">    group.duration = <span class="number">10</span>;</div><div class="line">    group.repeatCount = <span class="number">1</span>;</div><div class="line">    group.autoreverses = <span class="literal">YES</span>;</div><div class="line">    group.beginTime = <span class="built_in">CACurrentMediaTime</span>() + <span class="number">2</span>; <span class="comment">// 2秒后执行</span></div><div class="line">    </div><div class="line">    <span class="comment">//注册代理</span></div><div class="line">    group.delegate = <span class="keyword">self</span>;</div><div class="line">    </div><div class="line">    <span class="comment">//添加动画</span></div><div class="line">    group.animations = [<span class="built_in">NSArray</span> arrayWithObjects:animation1, animation2, <span class="literal">nil</span>];</div><div class="line">    [_imageView.layer addAnimation:group forKey:<span class="string">@"group"</span>];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们还可以通过代理方法来监听到动画的开始和结束</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *  动画开始</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)animationDidStart:(<span class="built_in">CAAnimation</span> *)anim&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"动画开始"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *  动画结束</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)animationDidStop:(<span class="built_in">CAAnimation</span> *)anim finished:(<span class="built_in">BOOL</span>)flag&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"动画结束"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HEXO搭建个人博客]]></title>
      <url>http://yoursite.com/2016/08/24/HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h1 id="HEXO搭建个人博客"><a href="#HEXO搭建个人博客" class="headerlink" title="HEXO搭建个人博客"></a>HEXO搭建个人博客</h1><p>这篇教程是针对Mac的，参考链接：<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">Hexo文档</a></p>
<h2 id="1-安装Node（必须）"><a href="#1-安装Node（必须）" class="headerlink" title="1. 安装Node（必须）"></a>1. 安装Node（必须）</h2><p>到Node.js<a href="https://nodejs.org/en/" target="_blank" rel="external">官网</a>下载相应平台的最新版本，一路安装即可。</p>
<h2 id="2-安装Git（必须）"><a href="#2-安装Git（必须）" class="headerlink" title="2. 安装Git（必须）"></a>2. 安装Git（必须）</h2><p>安装Xcode就自带有Git</p>
<h2 id="3-申请GitHub（必须）"><a href="#3-申请GitHub（必须）" class="headerlink" title="3. 申请GitHub（必须）"></a>3. 申请GitHub（必须）</h2><p>用来做博客的远程创库、域名、服务器之类的。<a href="https://github.com" target="_blank" rel="external">github</a>账号没有的话直接申请就行了，跟一般的注册账号差不多</p>
<h2 id="4-正式安装HEXO"><a href="#4-正式安装HEXO" class="headerlink" title="4. 正式安装HEXO　"></a>4. 正式安装HEXO　</h2><p>第一步<br>Node和Git都安装好后，执行如下命令安装hexo：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sudo npm install -g hexo</div></pre></td></tr></table></figure>
<p>第二步<br>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。“Blog”是将要创建的文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ hexo init Blog</div><div class="line">$ cd Blog</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>第三步<br>安装完成之后指定文件夹的目录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── source</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes</div></pre></td></tr></table></figure>
<p>第四步<br>现在可以试试启动本地服务，进行文章预览调试，命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ hexo server (hexo s)也可以</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">INFO  Start processing</div><div class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure>
<p>在浏览器中输入 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 就可看到你自己的博客最原始的页面了</p>
<h2 id="5-配置Github"><a href="#5-配置Github" class="headerlink" title="5. 配置Github　"></a>5. 配置Github　</h2><p>建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法 然后建立关联<br>现在我们需要到Blog文件夹内找到并编辑_config.yml文件，来建立关联，命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ vim _config.yml</div></pre></td></tr></table></figure>
<p>在文件的最下面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: https://github.com/pengrain/pengrain.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>保存后再执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>然后再浏览器中输入<a href="http://pengrain.github.io/" target="_blank" rel="external">http://pengrain.github.io/</a> 就行了，我的github的账户叫pengrain,把这个改成你github的账户名就行了</p>
<p>到这里整个hexo就部署好了，以后要添加文章的步骤如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">hexo new &quot;postName&quot; #新建文章</div><div class="line">hexo generate #生成静态页面至public目录 在目录source/_posts中可以直接用MarkDown工具编辑文章</div><div class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</div><div class="line">hexo deploy #将.deploy目录部署到GitHub</div></pre></td></tr></table></figure>
<h2 id="6-主题配置"><a href="#6-主题配置" class="headerlink" title="6. 主题配置　"></a>6. 主题配置　</h2><p>在这里有非常详细的主题配置介绍<br><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">next主题</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS编码规范]]></title>
      <url>http://yoursite.com/2016/08/24/iOS%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h2 id="统一代码规范原则"><a href="#统一代码规范原则" class="headerlink" title="统一代码规范原则"></a>统一代码规范原则</h2><blockquote>
<p>为使代码清晰简洁，方便阅读理解，请大家统一遵从以下的代码规范。<br>尽量同苹果官方代码规范靠齐，做到逻辑清楚，变量名具有可读性，函数功能划分合理</p>
</blockquote>
<p>主要参考规范：</p>
<p><a href="http://google-styleguide.googlecode.com/svn/trunk/objcguide.xml" target="_blank" rel="external">Google Objective-C Style Guide</a></p>
<p><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.pdf" target="_blank" rel="external">Coding Guidelines for Cocoa</a></p>
<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><h3 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h3><blockquote>
<p>类名（以及类别、协议名）应首字母大写，并以驼峰格式分割单词。<br>应用层 的代码，应该尽量避免不必要的前缀。为每个类都添加相同的前缀无助于可读性。当编写的代码期望在不同应用程序间复用时，应使用前缀（如：<code>GTMSendMessage</code>）。</p>
</blockquote>
<h3 id="类别名"><a href="#类别名" class="headerlink" title="类别名"></a>类别名</h3><blockquote>
<p>类别名应该有两三个字母的前缀以表示类别是项目的一部分或者该类别是通用的。类别名应该包含它所扩展的类的名字。</p>
</blockquote>
<h3 id="方法名"><a href="#方法名" class="headerlink" title="方法名"></a>方法名</h3><blockquote>
<p>方法名应该以小写字母开头，并混合驼峰格式。每个具名参数也应该以小写字母开头。</p>
</blockquote>
<p>方法名应尽量读起来就像句子，这表示你应该选择与方法名连在一起读起来通顺的参数名。（例如，<code>convertPoint:fromRect:</code> 或 <code>replaceCharactersInRange:withString:</code>）。<br>自己命名的方法不应该以get作为前缀：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)getDelegate;  <span class="comment">// 不建议</span></div><div class="line">- (<span class="keyword">id</span>)delegate;     <span class="comment">// 建议</span></div></pre></td></tr></table></figure>
<h3 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h3><blockquote>
<p>变量名应该以小写字母开头，并使用驼峰格式。类的成员变量应该以下划线作为后缀。例如：myLocalVariable、myInstanceVariable。</p>
</blockquote>
<p>实例变量应该混合大小写并且变量名前面加下划线“_”，局部变量不用加。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> _num;</div><div class="line">    <span class="built_in">NSString</span>* _name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>尽可能把代码写的如同文档一样，让别人直接看代码就知道意思，写代码时别担心名字太长<br>建议使用“#pragma mark”，方便阅读代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 一个NSApplication处理APP启动和关机通知的代理方法</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyAppDelegate</span> : <span class="title">NSObject</span> </span>&#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="空格和留白"><a href="#空格和留白" class="headerlink" title="空格和留白"></a>空格和留白</h2><h3 id="方法声明和定义"><a href="#方法声明和定义" class="headerlink" title="方法声明和定义"></a>方法声明和定义</h3><blockquote>
<p>方法中得代码应该缩进 4 个空格。</p>
<ul>
<li>/ + 和返回类型之间须使用一个空格，参数列表中只有参数之间可以有空格。</li>
</ul>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//方法声明和定义</span></div><div class="line"><span class="comment">//参数类型后的星号和参数类型间的空格是可选的。当写新的代码时，要与先前代码保持一致。</span></div><div class="line">- (<span class="keyword">void</span>)doSomethingWithString:(<span class="built_in">NSString</span> *)theString &#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//多参数方法定义</span></div><div class="line"><span class="comment">//如果一行有非常多的参数，更好的方式是将每个参数单独拆成一行。如果使用多行，将每个参数前的冒号对齐。</span></div><div class="line">- (<span class="keyword">void</span>)doSomethingWith:(GTMFoo *)theFoo</div><div class="line">                   rect:(<span class="built_in">NSRect</span>)theRect</div><div class="line">               interval:(<span class="keyword">float</span>)theInterval &#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//当第一个关键字比其它的短时，保证下一行至少有 4 个空格的缩进。这样可以使关键字垂直对齐，而不是使用冒号对齐：</span></div><div class="line">- (<span class="keyword">void</span>)<span class="keyword">short</span>:(GTMFoo *)theFoo</div><div class="line">    longKeyword:(<span class="built_in">NSRect</span>)theRect</div><div class="line">    evenLongerKeyword:(<span class="keyword">float</span>)theInterval &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><blockquote>
<p>方法调用应尽量保持与方法声明的格式一致。当格式的风格有多种选择时，新的代码要与已有代码保持一致。</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//不建议的风格</span></div><div class="line">[myObject doFooWith:arg1 name:arg2  </div><div class="line">              error:arg3];</div><div class="line">              </div><div class="line">[myObject doFooWith:arg1</div><div class="line">               name:arg2 error:arg3];</div><div class="line"></div><div class="line">[myObject doFooWith:arg1</div><div class="line">          name:arg2  </div><div class="line">          error:arg3];</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//建议风格调用时所有参数应该在同一行：</span></div><div class="line">[myObject doFooWith:arg1 name:arg2 error:arg3];</div><div class="line"></div><div class="line"><span class="comment">//或者每行一个参数，以冒号对齐：</span></div><div class="line">[myObject doFooWith:arg1</div><div class="line">               name:arg2</div><div class="line">              error:arg3];</div><div class="line">              </div><div class="line"><span class="comment">//方法定义与方法声明一样，当关键字的长度不足以以冒号对齐时，下一行都要以四个空格进行缩进。</span></div><div class="line">[myObj <span class="keyword">short</span>:arg1</div><div class="line">    longKeyword:arg2</div><div class="line">    evenLongerKeyword:arg3];</div></pre></td></tr></table></figure>
<h2 id="public-和-private"><a href="#public-和-private" class="headerlink" title="@public 和 @private"></a>@public 和 @private</h2><blockquote>
<p><code>@public</code> 和 <code>@private</code> 访问修饰符应该以一个空格缩进。</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyClass</span> : <span class="title">NSObject</span> </span>&#123;</div><div class="line"> <span class="keyword">@public</span></div><div class="line">  ...</div><div class="line"> <span class="keyword">@private</span></div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="协议名"><a href="#协议名" class="headerlink" title="协议名"></a>协议名</h2><blockquote>
<p>类型标识符和尖括号内的协议名之间，不能有任何空格。</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//这条规则适用于类声明、实例变量以及方法声明。例如：</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyProtocoledClass</span> : <span class="title">NSObject</span>&lt;<span class="title">NSWindowDelegate</span>&gt; </span>&#123;</div><div class="line"> <span class="keyword">@private</span></div><div class="line">  <span class="keyword">id</span>&lt;MyFancyDelegate&gt; delegate;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)setDelegate:(<span class="keyword">id</span>&lt;MyFancyDelegate&gt;)aDelegate;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="块（闭包）"><a href="#块（闭包）" class="headerlink" title="块（闭包）"></a>块（闭包）</h2><blockquote>
<p>块中的代码应该缩进4个空格</p>
</blockquote>
<p>取决于块的长度，下列都是合理的风格准则：</p>
<ul>
<li>如果一行可以写完块，则没必要换行。</li>
<li>如果不得不换行，关括号应与块声明的第一个字符对齐。</li>
<li>块内的代码须按4空格缩进</li>
<li>如果块太长，比如超过20行，建议定义成一个局部变量，然后再使用该变量</li>
<li>如果块不带参数，<code>^{</code>之间无需空格。如果带有参数<code>^{</code>之间也无须空格，但是<code>) {</code>之间须有一个空格</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 如果可以，整个块在一行上。</span></div><div class="line">[operation setCompletionBlock:^&#123; [<span class="keyword">self</span> onOperationDone]; &#125;];</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 块的内容也可以另起一行，但是必须缩进四个空格，后面的与第一行对齐</span></div><div class="line">[operation setCompletionBlock:^&#123;</div><div class="line">    [<span class="keyword">self</span>.delegate newDataAvailable];</div><div class="line">&#125;];</div><div class="line"></div><div class="line"><span class="built_in">dispatch_async</span>(fileIOQueue_, ^&#123;</div><div class="line">    <span class="built_in">NSString</span>* path = [<span class="keyword">self</span> sessionFilePath];</div><div class="line">    <span class="keyword">if</span> (path) &#123;</div><div class="line">      <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//参数名和block在同一行上时注意 “^&#123;“ 之间没有空格  ”) &#123;“有一个空格</span></div><div class="line">[[SessionService sharedService]</div><div class="line">    loadWindowWithCompletionBlock:^(SessionWindow *window) &#123;</div><div class="line">        <span class="keyword">if</span> (window) &#123;</div><div class="line">          [<span class="keyword">self</span> windowDidLoad:window];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          [<span class="keyword">self</span> errorLoadingWindow];</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 参数名和block不在同一行上时的写法</span></div><div class="line">[[SessionService sharedService]</div><div class="line">    loadWindowWithCompletionBlock:</div><div class="line">        ^(SessionWindow *window) &#123;</div><div class="line">            <span class="keyword">if</span> (window) &#123;</div><div class="line">              [<span class="keyword">self</span> windowDidLoad:window];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">              [<span class="keyword">self</span> errorLoadingWindow];</div><div class="line">            &#125;</div><div class="line">        &#125;];</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 如果块太长时，定义成一个局部变量，然后再使用该变量的格式</span></div><div class="line"><span class="keyword">void</span> (^largeBlock)(<span class="keyword">void</span>) = ^&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;;</div><div class="line">[operationQueue_ addOperationWithBlock:largeBlock];</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
  
  
</search>
